{"version":3,"sources":["logo.svg","components/pages/Public.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","Footer","Public","_ref","component","rest","Object","objectWithoutProperties","Route","assign","render","props","Public_Header","React","Public_Footer","Body","process","Page1","Page2","Routes","BrowserRouter","basename","Switch","pages_Public","exact","path","App","App_Routes","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8NCGlCC,EAAS,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,8BAKAE,EAAS,WACb,OACEJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAChBH,EAAAC,EAAAC,cAAA,+DAiBWG,EAZF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAcC,EAAjBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,sBACbN,EAAAC,EAAAC,cAACS,EAAA,EAADF,OAAAG,OAAA,GAAWJ,EAAX,CAAiBK,OAAQ,SAACC,GACtB,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAD,MACCC,IAAMd,cAAcK,EAAWO,GAChCd,EAAAC,EAAAC,cAACe,EAAD,YCnBJC,EAAO,kBACXlB,EAAAC,EAAAC,cAAA,mBAAWiB,aAAX,UAEIC,EAAQ,kBACZpB,EAAAC,EAAAC,cAAA,qBAEImB,EAAQ,kBACZrB,EAAAC,EAAAC,cAAA,qBAGIoB,EAAS,SAAAR,GAAK,OAClBd,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQC,SAAUL,cAChBnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAADjB,OAAAG,OAAA,CAAQe,OAAK,EAACC,KAAK,IAAIrB,UAAWW,GAAUJ,IAC5Cd,EAAAC,EAAAC,cAACwB,EAADjB,OAAAG,OAAA,CAAQgB,KAAK,SAASrB,UAAWa,GAAWN,IAC5Cd,EAAAC,EAAAC,cAACwB,EAADjB,OAAAG,OAAA,CAAQgB,KAAK,SAASrB,UAAWc,GAAWP,OAanCe,mLANX,OACE7B,EAAAC,EAAAC,cAAC4B,EAAD,aAHYC,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASxB,OAAOb,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.977d9463.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PropTypes } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"jumbotron text-center\">\r\n      <h1>Guideline Team</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Footer = () => {\r\n  return  (\r\n    <footer className=\"container-fluid text-center\">\r\n      <p>Made By Research and Development Technical Team </p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nconst Public = ({ component, ...rest }) => (\r\n  <Route {...rest} render={(props) => {\r\n      return (\r\n        <div>\r\n          <Header />\r\n          {React.createElement(component, props)}\r\n          <Footer />\r\n        </div>\r\n      )\r\n    }} />\r\n  )\r\n\r\n  export default Public\r\n","import React, { Component } from 'react';\nimport { Switch, Route, Redirect,BrowserRouter as Router } from 'react-router-dom'\nimport logo from './logo.svg';\nimport './App.css';\nimport Public from './components/pages/Public'\n\nconst Body = () => (\n  <div>Body {process.env.PUBLIC_URL} Test</div>\n)\nconst Page1 = () => (\n  <div>Page1</div>\n)\nconst Page2 = () => (\n  <div>Page2</div>\n)\n\nconst Routes = props => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Public exact path=\"/\" component={Body} {...props} />\n      <Public path=\"/Page1\" component={Page1} {...props} />\n      <Public path=\"/Page2\" component={Page2} {...props} />\n    </Switch>\n  </Router>\n)\n\nclass App extends Component {\n  render() {\n    return (\n      <Routes />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}